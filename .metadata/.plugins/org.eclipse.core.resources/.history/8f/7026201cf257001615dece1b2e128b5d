package manager;

import java.io.Serializable;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.annotation.Resource;
import javax.sql.DataSource;

import utils.TechniqueException;

public abstract class Manager implements Serializable {

	private static final long serialVersionUID = 1L;

	@Resource(
			mappedName = "java:/superavenir-datasource")
	protected DataSource mDataSource;

	protected interface Preparator<P> {
		void invoke(P p) throws SQLException;
	}

	protected interface Fetcher<P, R> {
		R apply(P p) throws SQLException, TechniqueException;
	}

	protected static void printStackTrace(Exception e) {
		StackTraceElement lElement = Thread.currentThread().getStackTrace()[3];
		System.err.println(lElement.getClassName() + "." + lElement.getMethodName() + " [" + lElement.getLineNumber() + "] : " + e.getMessage());
	}

	protected <R> R select(String pQuery, Preparator<PreparedStatement> pPreparator, Fetcher<ResultSet, R> pFetcher) throws TechniqueException {
		try (Connection lConnection = mDataSource.getConnection(); PreparedStatement lStatement = lConnection.prepareStatement(pQuery)) {
			if (pPreparator != null) {
				pPreparator.invoke(lStatement);
			}
			ResultSet lResultSet = lStatement.executeQuery();
			return pFetcher.apply(lResultSet);
		} catch (SQLException e) {
			printStackTrace(e);
			throw new TechniqueException("Erreur lors de récupération de données.");
		}

	}

	protected <R> R select(String pQuery, Preparator<PreparedStatement> pPreparator, Fetcher<ResultSet, R> pFetcher, boolean pNeedManipulation) throws TechniqueException {
		if (!pNeedManipulation) {
			return select(pQuery, pPreparator, pFetcher);
		}
		try (Connection lConnection = mDataSource.getConnection(); PreparedStatement lStatement = lConnection.prepareStatement(pQuery)) {
			if (pPreparator != null) {
				pPreparator.invoke(lStatement);
			}
			if (lStatement.execute()) {
				ResultSet lResultSet = lStatement.getResultSet();
				return pFetcher.apply(lResultSet);
			} else {
				return null;
			}
		} catch (SQLException e) {
			printStackTrace(e);
			throw new TechniqueException("Erreur lors de récupération de données.");
		}

	}

	protected int update(String pQuery, Preparator<PreparedStatement> pPreparator) throws TechniqueException {
		return update(pQuery, pPreparator, Statement.NO_GENERATED_KEYS);
	}

	protected int update(String pQuery, Preparator<PreparedStatement> pPreparator, int pGeneratedKeysReturnMode) throws TechniqueException {
		try (Connection lConnection = mDataSource.getConnection(); PreparedStatement lStatement = lConnection.prepareStatement(pQuery, pGeneratedKeysReturnMode)) {
			if (pPreparator != null) {
				pPreparator.invoke(lStatement);
			}
			lStatement.executeUpdate();
			if (pGeneratedKeysReturnMode == Statement.RETURN_GENERATED_KEYS) {
				ResultSet lResultSet = lStatement.getGeneratedKeys();
				if (lResultSet.next()) {
					return lResultSet.getInt(1);
				}
			}
		} catch (SQLException e) {
			printStackTrace(e);
			throw new TechniqueException("Erreur lors de la mise à jour de données.");
		}
		return 0;
	}

	public void setDataSource(DataSource pDataSource) {
		mDataSource = pDataSource;
	}

	protected boolean isWhiteLabel() throws TechniqueException {
		String lValue = select("SELECT * FROM conf WHERE conf.key = 'is_white_label'", null, lResultSet -> {
			if (lResultSet.next()) {
				return lResultSet.getString("value");
			}
			return "";
		});
		if (lValue.equals("true") || lValue.equals("1")) {
			return true;
		}
		return false;
	}

	/**
	 * This query will always return an application containing all informations necessary to be pass to the Matcher class without throwing Exceptions due to missing attributes
	 */
	protected final String mApplicationForMatcherQuery = ""
			+ "SELECT * FROM application                                                                                      "
			+ "                                                                                                               "
			+ "LEFT OUTER JOIN recruiter                      ON recruiter.id                 = application.id_recruiter      "
			+ "LEFT OUTER JOIN user as user_rec               ON user_rec.id                  = recruiter.id                  "
			+ "                                                                                                               "
			+ "LEFT OUTER JOIN applicant                      ON applicant.id                 = application.id_applicant      "
			+ "LEFT OUTER JOIN user        AS user_app        ON user_app.id                  = applicant.id                  "
			+ "LEFT OUTER JOIN commune     AS commune_app     ON applicant.id_commune         = commune_app.id                "
			+ "LEFT OUTER JOIN departement AS departement_app ON commune_app.code_departement = departement_app.code          "
			+ "LEFT OUTER JOIN region      AS region_app      ON departement_app.code_region  = region_app.code               "
			+ "LEFT OUTER JOIN job_type    AS job_type_app    ON job_type_app.name            = applicant.searched_job_type   "
			+ "LEFT OUTER JOIN job_title   AS job_title_app   ON job_title_app.name           = applicant.searched_job_title  "
			+ "LEFT OUTER JOIN job_family  AS job_family_app  ON job_family_app.name          = job_title_app.job_family      "
			+ "                                                                                                               "
			+ "LEFT OUTER JOIN offer                          ON offer.id                     = application.id_offer          "
			+ "LEFT OUTER JOIN commune     AS commune_off     ON offer.id_commune             = commune_off.id                "
			+ "LEFT OUTER JOIN departement AS departement_off ON commune_off.code_departement = departement_off.code          "
			+ "LEFT OUTER JOIN region      AS region_off      ON departement_off.code_region  = region_off.code               "
			+ "LEFT OUTER JOIN job_type    AS job_type_off    ON job_type_off.name            = offer.job_type                "
			+ "LEFT OUTER JOIN job_title   AS job_title_off   ON job_title_off.name           = offer.job_title               "
			+ "LEFT OUTER JOIN job_family  AS job_family_off  ON job_family_off.name          = job_title_off.job_family      ";

}
